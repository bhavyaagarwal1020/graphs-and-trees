#include <bits/stdc++.h>
using namespace std;
const int N=1e5+10;

vector<int>g[N];
int visited[N];
vector<int>currconnected;
vector<vector<int>>connected;

void dfs(int vertex)
{
 currconnected.push_back(vertex);
 visited[vertex]=1; //take action on vertex before entering child.
 
 for(int child:g[vertex])
 {
  if(visited[child]==1)
   continue;
   dfs(child);
 }
}


int main()
{
 int v,e;
 cout<<"enter number of vertices and edges="<<endl;
 cin>>v>>e;
 for(int i=0;i<e;i++)
 {
  int x,y;
  cout<<"enter edges="<<endl;
  cin>>x>>y;
  g[x].push_back(y);
  g[y].push_back(x);
 }
  for(int i=1;i<=v;i++)
  {
   if(visited[i]==1)
     continue;
    currconnected.clear();
    dfs(i);
    connected.push_back(currconnected);
  }
for(auto a:connected)
{
  for(int ver:a)
  {
    cout<<ver<<" ";
  }
    cout<<endl;
}
  
}
